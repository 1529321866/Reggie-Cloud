{"remainingRequest":"E:\\git projects\\order-take-out-cloud-master\\order-take-out-cloud-master\\app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\git projects\\order-take-out-cloud-master\\order-take-out-cloud-master\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\git projects\\order-take-out-cloud-master\\order-take-out-cloud-master\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\git projects\\order-take-out-cloud-master\\order-take-out-cloud-master\\app\\src\\views\\Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"E:\\git projects\\order-take-out-cloud-master\\order-take-out-cloud-master\\app\\src\\views\\Home.vue","mtime":1659793824000},{"path":"E:\\git projects\\order-take-out-cloud-master\\order-take-out-cloud-master\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\git projects\\order-take-out-cloud-master\\order-take-out-cloud-master\\app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\git projects\\order-take-out-cloud-master\\order-take-out-cloud-master\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\git projects\\order-take-out-cloud-master\\order-take-out-cloud-master\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}